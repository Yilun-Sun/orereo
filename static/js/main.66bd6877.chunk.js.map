{"version":3,"sources":["logo.svg","Oreo/Oreo.js","App.js","serviceWorker.js","index.js","o.png","re.png"],"names":["module","exports","users","usersElements","textElements","Oreo","props","addO","event","push","src","changeOreo","addRE","state","this","updateOreo","index","length","o","re","alt","style","width","height","position","top","left","window","innerWidth","setState","reverse","document","getElementById","innerHTML","join","Header","Layout","Content","Footer","className","border","onBack","title","subTitle","padding","id","fontSize","color","background","minHeight","Fragment","type","onClick","textAlign","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,yNCOrCC,G,cAAQ,IAGVC,EAAgB,GAEhBC,EAAe,GA8IJC,E,YA5HX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAiBVC,KAAO,SAACC,GACJN,EAAMO,KAAK,CAAEC,IAAK,MAClB,EAAKC,cApBU,EAsBnBC,MAAQ,SAACJ,GACLN,EAAMO,KAAK,CAAEC,IAAK,OAClB,EAAKC,cAtBL,EAAKE,MAAQ,CACTV,cAAe,GACfC,aAAc,IAJH,E,iFASfU,KAAKC,e,uHAmBLZ,EAAgB,GAChBC,EAAe,GAEf,IAAK,IAAIY,EAAQ,EAAGA,EAAQd,EAAMe,OAAQD,IACtCb,EAAcM,KACV,6BACI,yBAAKC,IAA0B,MAArBR,EAAMc,GAAON,IAAcQ,IAAIC,IAAIC,IAAI,OAC7CC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,SAAU,WAAYC,IAAK,IAAc,GAART,EAAYU,KAAMC,OAAOC,WAAa,EAAI,SAIzHxB,EAAaK,KAA0B,MAArBP,EAAMc,GAAON,IAAc,IAAM,MAavDI,KAAKe,SAAS,CACV1B,cAAeA,EACfC,aAAcA,EAAa0B,YAG/BC,SAASC,eAAe,YAAYC,UAAY7B,EAAa8B,KAAK,M,+BAKlE,IAKQC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAEzB,OACI,yBAAKC,UAAU,QACX,kBAAC,IAAD,CACIlB,MAAO,CACHmB,OAAQ,gCAEZC,OAAQ,kBAAM,MACdC,MAAM,SACNC,SAAS,+BAEb,kBAAC,IAAD,CAAQJ,UAAU,UACd,kBAACJ,EAAD,MAYA,kBAACE,EAAD,CAAShB,MAAO,CAAEuB,QAAS,WAMvB,0BAAMC,GAAG,WAAWxB,MApClB,CACdyB,SAAU,OACVC,MAAO,YAkCK,QACA,yBAAK1B,MAAO,CAAE2B,WAAY,UAAWJ,QAAS,GAAIK,UAAW,MAA7D,KAEA,kBAAC,IAAMC,SAAP,KAEJ,6BAAM/C,GAEN,6BACI,kBAAC,IAAD,CAAQgD,KAAK,UAAUC,QAAStC,KAAKP,MAArC,SACA,kBAAC,IAAD,CAAQ4C,KAAK,UAAUC,QAAStC,KAAKF,OAArC,aAQJ,kBAAC0B,EAAD,CAAQjB,MAAO,CAAEgC,UAAW,WAA5B,uD,GApHDC,IAAMC,WCjBVC,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCKckB,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASC,eAAe,SD6H3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBErInBpE,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.66bd6877.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Button, Radio, Icon, PageHeader, Row, Layout, Menu, Breadcrumb } from 'antd';\r\nimport o from '../o.png';\r\nimport re from '../re.png';\r\nimport logo from '../logo.svg';\r\nimport './Oreo.css';\r\n\r\nconst users = [\r\n]\r\n\r\nvar usersElements = []\r\n\r\nvar textElements = [];\r\n\r\n// function changeOreo() {\r\n//     usersElements = [];\r\n//     for (let index = users.length - 1; index >= 0; index--) {\r\n//         usersElements.push( // 循环每个用户，构建 JSX，push 到数组中\r\n//             <div>\r\n//                 <img src={users[index].src === 'o' ? o : re} alt=\"logo\"\r\n//                     style={{ width: 240, height: 160, position: 'absolute', top: 50 + index * 20, left: window.innerWidth / 2 - 120 }}\r\n//                 />\r\n//             </div>\r\n//         )\r\n//         textElements.push(users[index].src === 'o' ? 'O' : 'RE');\r\n//     }\r\n// }\r\n\r\n\r\nclass Oreo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            usersElements: [],\r\n            textElements: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateOreo();\r\n    }\r\n    componentDidUpdate() {\r\n\r\n    }\r\n    updateOreo() {\r\n\r\n    }\r\n\r\n    addO = (event) => {\r\n        users.push({ src: 'o' });\r\n        this.changeOreo();\r\n    }\r\n    addRE = (event) => {\r\n        users.push({ src: 're' });\r\n        this.changeOreo();\r\n    }\r\n\r\n    changeOreo() {\r\n        usersElements = [];\r\n        textElements = [];\r\n\r\n        for (let index = 0; index < users.length; index++) {\r\n            usersElements.push( // 循环每个用户，构建 JSX，push 到数组中\r\n                <div>\r\n                    <img src={users[index].src === 'o' ? o : re} alt=\"logo\"\r\n                        style={{ width: 240, height: 160, position: 'absolute', top: 650 - index * 20, left: window.innerWidth / 2 - 120 }}\r\n                    />\r\n                </div>\r\n            )\r\n            textElements.push(users[index].src === 'o' ? 'O' : 'RE');\r\n        }\r\n        // for (let index = users.length - 1; index >= 0; index--) {\r\n        //     usersElements.push( // 循环每个用户，构建 JSX，push 到数组中\r\n        //         <div>\r\n        //             <img src={users[index].src === 'o' ? o : re} alt=\"logo\"\r\n        //                 style={{ width: 240, height: 160, position: 'absolute', top: 300 - index * 20, left: window.innerWidth / 2 - 120 }}\r\n        //             />\r\n        //         </div>\r\n        //     )\r\n        //     textElements.push(users[index].src === 'o' ? 'O' : 'RE');\r\n        // }\r\n\r\n        this.setState({\r\n            usersElements: usersElements,\r\n            textElements: textElements.reverse()\r\n        });\r\n\r\n        document.getElementById(\"oreoText\").innerHTML = textElements.join('');\r\n    }\r\n\r\n    render() {\r\n\r\n        const textStyle = {\r\n            fontSize: '40px',\r\n            color: '#000000'\r\n        };\r\n\r\n        const { Header, Content, Footer } = Layout;\r\n\r\n        return (\r\n            <div className=\"Oreo\">\r\n                <PageHeader\r\n                    style={{\r\n                        border: '1px solid rgb(235, 237, 240)',\r\n                    }}\r\n                    onBack={() => null}\r\n                    title=\"OREREO\"\r\n                    subTitle=\"build your own orereo here\"\r\n                />\r\n                <Layout className=\"layout\">\r\n                    <Header>\r\n                        {/* <Menu\r\n                            theme=\"dark\"\r\n                            mode=\"horizontal\"\r\n                            defaultSelectedKeys={['2']}\r\n                            style={{ lineHeight: '64px' }}\r\n                        >\r\n                            <Menu.Item key=\"1\">nav 1</Menu.Item>\r\n                            <Menu.Item key=\"2\">nav 2</Menu.Item>\r\n                            <Menu.Item key=\"3\">nav 3</Menu.Item>\r\n                        </Menu> */}\r\n                    </Header>\r\n                    <Content style={{ padding: '0 50px' }}>\r\n                        {/* <Breadcrumb style={{ margin: '16px 0' }}>\r\n                            <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                            <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                            <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                        </Breadcrumb> */}\r\n                        <text id=\"oreoText\" style={textStyle}> =P </text>\r\n                        <div style={{ background: '#33A6B8', padding: 24, minHeight: 650}}> </div>\r\n\r\n                        <React.Fragment>\r\n\r\n                    <div>{usersElements}</div>\r\n                    {/* <div>{textElements}</div> */}\r\n                    <div>\r\n                        <Button type=\"primary\" onClick={this.addO}>add O</Button>\r\n                        <Button type=\"primary\" onClick={this.addRE}>add RE</Button>\r\n                    </div>\r\n\r\n                    \r\n                </React.Fragment>\r\n\r\n                    </Content>\r\n                    \r\n                    <Footer style={{ textAlign: 'center' }}> Elonn Software ©2020 Created by Yilun Sun</Footer>\r\n                </Layout>\r\n                \r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Oreo;","import React from 'react';\nimport './App.css';\nimport Oreo from './Oreo/Oreo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Oreo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/o.ed2be46e.png\";","module.exports = __webpack_public_path__ + \"static/media/re.7d5b0651.png\";"],"sourceRoot":""}